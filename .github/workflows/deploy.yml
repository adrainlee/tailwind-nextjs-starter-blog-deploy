name: CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'data/blog/**'
      - 'app/**'
      - 'components/**'
      - 'layouts/**'
      - 'css/**'
      - 'public/**'
      - 'data/authors/**'
      - 'data/*.{js,ts}'
      - '*.config.{js,ts}'
  pull_request:
    branches: [main]
    paths:
      - 'data/blog/**'
      - 'app/**'
      - 'components/**'
      - 'layouts/**'
      - 'css/**'
      - 'public/**'
      - 'data/authors/**'
      - 'data/*.{js,ts}'
      - '*.config.{js,ts}'

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Check
        run: npm run build

      - name: Type Check
        run: ./node_modules/.bin/tsc --noEmit

      - name: Lint Check
        run: npm run lint

      - name: Format Check
        run: npm run format

      - name: Check for uncommitted changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Found uncommitted changes after formatting. Please run 'npm run format' and commit the changes."
            git diff
            exit 1
          fi

      - name: Security Audit
        run: npm audit

  deploy:
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Deploy to production
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USERNAME: ubuntu
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          # 设置SSH密钥
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # 备份当前版本
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST "cd /data && \
            if [ -d blog ]; then \
              timestamp=\$(date +%Y%m%d_%H%M%S) && \
              mv blog blog_backup_\$timestamp && \
              mkdir blog && \
              ls -1d blog_backup_* | sort -r | tail -n +4 | xargs -r rm -rf; \
            fi"

          # 检查并安装必要的软件
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST "source ~/.bashrc && \
            export NVM_DIR=\"\$HOME/.nvm\" && \
            [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\" && \
            nvm use 18 || nvm install 18 && \
            export PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.nvm/versions/node/v18.20.6/bin:\$PATH\" && \
            npm install -g pm2"

          # 部署新版本
          tar czf - .next public package.json package-lock.json next.config.js | \
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST "source ~/.bashrc && \
            export NVM_DIR=\"\$HOME/.nvm\" && \
            [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\" && \
            nvm use 18 && \
            export PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/.nvm/versions/node/v18.20.6/bin:\$PATH\" && \
            cd /data/blog && \
            tar xzf - && \
            npm ci && \
            export NODE_ENV=production && \
            export NEXT_TELEMETRY_DISABLED=1 && \
            pm2 delete blog || true && \
            pm2 start npm --name blog -- run serve -- --port 3001"

          # 删除SSH密钥
          rm -f ~/.ssh/deploy_key

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}'
            const issue_number = context.issue.number

            if (issue_number) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                body: `Deployment ${status === 'success' ? 'succeeded ✅' : 'failed ❌'}`
              })
            }
