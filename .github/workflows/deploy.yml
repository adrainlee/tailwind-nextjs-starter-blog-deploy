name: Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'data/blog/**'
      - 'app/**'
      - 'components/**'
      - 'layouts/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Build
      run: yarn build
    
    - name: Deploy to production
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
        SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
      run: |
        # 设置SSH密钥
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        
        # 备份当前版本
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST "cd /var/www/blog && \
          if [ -d current ]; then \
            timestamp=\$(date +%Y%m%d_%H%M%S) && \
            mv current backup_\$timestamp && \
            ls -1d backup_* | sort -r | tail -n +4 | xargs -r rm -rf; \
          fi"
        
        # 检查并安装必要的软件
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST "
          # 检查Node.js版本，确保版本 >= 18
          if ! command -v node &> /dev/null; then
            echo "Node.js未安装，正在安装 Node.js 18..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && \
            sudo apt-get install -y nodejs
          else
            node_version=\$(node -v | cut -d. -f1 | tr -d 'v')
            if [ "\$node_version" -lt "18" ]; then
              echo "Node.js版本过低（当前版本：\$(node -v)），正在更新到 Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - && \
              sudo apt-get install -y nodejs
            else
              echo "Node.js版本符合要求（当前版本：\$(node -v)）"
            fi
          fi

          # 检查yarn是否安装，如果没有则安装
          if ! command -v yarn &> /dev/null; then
            sudo npm install -g yarn
          fi

          # 检查PM2是否安装，如果没有则安装
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
        "

        # 部署新版本
        tar czf - .next public | ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SERVER_USERNAME@$SERVER_HOST "cd /var/www/blog && \
          mkdir -p current && \
          cd current && \
          tar xzf - && \
          pm2 restart blog || pm2 start yarn --name blog -- start"
        
        # 删除SSH密钥
        rm -f ~/.ssh/deploy_key
    
    - name: Notify deployment status
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const status = '${{ job.status }}'
          const issue_number = context.issue.number
          
          if (issue_number) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: `Deployment ${status === 'success' ? 'succeeded ✅' : 'failed ❌'}`
            })
          }